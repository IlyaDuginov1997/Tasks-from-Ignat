{"version":3,"sources":["p2-homeworks/h11/HW11.module.css","p2-homeworks/h11/HW11.tsx","p1-main/m1-ui/u1-app/App.tsx","p2-homeworks/h10/bll/loadingReducer.ts","p2-homeworks/h10/bll/store.ts","serviceWorker.ts","index.tsx","p1-main/m1-ui/u1-app/App.module.css"],"names":["module","exports","HW11","useState","className","styles","main","App","s","initState","isLoading","reducers","combineReducers","state","action","type","status","store","createStore","window","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,cAAgB,4BAA4B,iBAAmB,+BAA+B,gBAAkB,8BAA8B,gBAAkB,gC,8JCuCnKC,MAnCf,WAAiB,IAAD,EACgBC,mBAAS,GADzB,gCAEgBA,mBAAS,MAFzB,mBAIZ,OAJY,UAKR,sBAAKC,UAAWC,IAAOC,KAAvB,UACI,uBADJ,eAqBI,uBAIA,2BCXGC,MApBf,WACI,OACI,sBAAKH,UAAWI,IAAED,IAAlB,UACI,mDAWA,cAAC,EAAD,Q,OClBNE,EAAuB,CACzBC,WAAW,G,OCETC,EAAWC,YAAgB,CAC7BF,UDM0B,WAA0E,IAAzEG,EAAwE,uDAArDJ,EAAWK,EAA0C,uCACnG,OAAQA,EAAOC,MACX,IAAK,UACD,OAAO,2BAAIF,GAAX,IAAkBH,UAAWI,EAAOE,SAExC,QACI,OAAOH,MCRNI,EAAQC,YAAYP,GAOjCQ,OAAOF,MAAQA,ECHKG,QACa,cAA7BD,OAAOE,SAASC,UAEa,UAA7BH,OAAOE,SAASC,UAEhBH,OAAOE,SAASC,SAASC,MACrB,2DCVRC,IAASC,OACL,cAAC,IAAD,CAAUR,MAAOA,EAAjB,SACI,cAAC,EAAD,MAEJS,SAASC,eAAe,SD+HpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHC,QAAQD,MAAMA,EAAME,a,kBEhJpCrC,EAAOC,QAAU,CAAC,IAAM,oB","file":"static/js/main.7fd584f3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"HW11_mainContainer__3U2QZ\",\"peoplesContainer\":\"HW11_peoplesContainer__12K1k\",\"buttonContainer\":\"HW11_buttonContainer__3BFYW\",\"peopleContainer\":\"HW11_peopleContainer__19UF4\"};","import React, {useState} from 'react';\r\nimport Slider, { Range } from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport styles from './HW11.module.css'\r\n\r\nfunction HW11() {\r\n    const [value1, setValue1] = useState(0);\r\n    const [value2, setValue2] = useState(100);\r\n\r\n    return (\r\n        <div className={styles.main}>\r\n            <hr/>\r\n            homeworks 11\r\n            {/*<Slider min={0} max={100}/>*/}\r\n            {/*<Range/>*/}\r\n            {/*should work (должно работать)*/}\r\n            {/*<div>*/}\r\n            {/*    <span>{value1}</span>*/}\r\n            {/*    <SuperRange*/}\r\n            {/*        // сделать так чтоб value1 изменялось*/}\r\n            {/*    />*/}\r\n            {/*</div>*/}\r\n\r\n            {/*<div>*/}\r\n            {/*    <span>{value1}</span>*/}\r\n            {/*    <SuperDoubleRange*/}\r\n            {/*        // сделать так чтоб value1 и value2 изменялось*/}\r\n            {/*    />*/}\r\n            {/*    <span>{value2}</span>*/}\r\n            {/*</div>*/}\r\n\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativeSuperRange/>*/}\r\n            {/*<AlternativeSuperDoubleRange/>*/}\r\n            <hr/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HW11;\r\n","import React from 'react';\r\nimport s from './App.module.css';\r\nimport HW11 from '../../../p2-homeworks/h11/HW11';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className={s.App}>\r\n            <div>react homeworks:</div>\r\n            {/*<HW1/>*/}\r\n            {/*<HW2/>*/}\r\n            {/*<HW3/>*/}\r\n            {/*<HW4/>*/}\r\n            {/*<HW5/>*/}\r\n            {/*<HW6/>*/}\r\n            {/*<HW7/>*/}\r\n            {/*<HW8/>*/}\r\n            {/*<HW9/>*/}\r\n            {/*<HW10/>*/}\r\n            <HW11/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","const initState: StateType = {\r\n    isLoading: false,\r\n};\r\n\r\nexport type StateType = {\r\n    isLoading: boolean\r\n}\r\n\r\nexport type LoadingReducerType = ReturnType<typeof loadingAC>\r\n\r\nexport const loadingReducer = (state: StateType = initState, action: LoadingReducerType): StateType => {\r\n    switch (action.type) {\r\n        case 'LOADING': {\r\n            return {...state, isLoading: action.status}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const loadingAC = (status: boolean) => {\r\n    return {\r\n        type: 'LOADING',\r\n        status\r\n    } as const;\r\n};","import {loadingReducer} from './loadingReducer'\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\nconst reducers = combineReducers({\r\n    isLoading: loadingReducer,\r\n\r\n})\r\n\r\nexport const store = createStore(reducers)\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store // for dev\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href\r\n        )\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config)\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    )\r\n                })\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing\r\n                if (installingWorker == null) {\r\n                    return\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            )\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration)\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.')\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error)\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type')\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload()\r\n                    })\r\n                })\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            )\r\n        })\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister()\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message)\r\n            })\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport './index.css';\r\nimport App from './p1-main/m1-ui/u1-app/App';\r\nimport {store} from './p2-homeworks/h10/bll/store';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1hoY2\"};"],"sourceRoot":""}